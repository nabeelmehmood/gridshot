{"version":3,"sources":["modules/GameOverlay/index.module.css","modules/Context/index.js","modules/SphereGrid/index.js","api.js","modules/Canvas/PointerLockControls.js","modules/Canvas/index.js","modules/Cursor/index.js","modules/GameOverlay/index.js","modules/StartOverlay/index.js","modules/Game/index.js","App.js","index.js"],"names":["module","exports","timerInterval","array","Array","keys","SphereGrid","setScore","useState","sphereList","setSphereList","useEffect","list","sampleSize","Sphere","useCallback","position","id","onClick","e","object","sphereId","filter","item","sampleList","remove","number","includes","newId","sample","score","args","color","GameContext","createContext","GAME_STATES","SCORE_CONSTATS","DEFAULT_CAMERA","GameContextProvider","children","timeLeft","setTimeLeft","gameStart","setGameStart","totalClicks","setTotalClicks","topScore","setTopScore","fov","setFov","sensitivity","setSensitivity","scoreSaved","setScoreSaved","leaderboard","setLeaderboard","getScores","axios","get","API_CONSTANT","then","res","data","users","topScoreLocal","localStorage","getItem","sensitivityLocal","fovLocal","scoreSavedLocal","JSON","parse","setItem","setInterval","time","clearInterval","Provider","value","pastCamera","CameraControls","forwardRef","props","controlsRef","speed","useFrame","current","camera","updateProjectionMatrix","rotation","x","y","z","diff","newAngles","set","PointerLockControls","selector","ref","ThreeCanvas","memo","controls","useRef","useContext","unlock","onCreated","cursor","document","querySelector","startOverlay","addEventListener","body","style","display","Vector3","getDirection","castShadow","intensity","scale","metalness","roughness","side","DoubleSide","Cursor","cursorRef","updatePosition","left","clientX","top","clientY","removeEventListener","className","usernameRegex","Filter","GameOverlay","error","setError","username","setUsername","spinner","setSpinner","showLeaderboard","setShowLeaderboard","calculateScore","showFinishedOverlay","totalScore","misses","accuracy","toFixed","showSaveScore","topScorer","total","submitForm","a","test","post","user","Number","status","console","log","class","styles","gameOverlay","counter","fontSize","count","clean","leaderboardButton","finishedOverlay","isNaN","saveScoreForm","formDesc","formInput","type","onChange","target","lds_dual_ring","disabled","leaderboardModal","closeButton","leadersList","leadersItem","map","index","StartOverlay","showReset","min","max","Game","clicks","height","width","App","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.d3a99dc9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameOverlay\":\"GameOverlay_gameOverlay__11lfk\",\"counter\":\"GameOverlay_counter__10t_X\",\"count\":\"GameOverlay_count__1Jwug\",\"finishedOverlay\":\"GameOverlay_finishedOverlay__3Uj9q\",\"saveScoreForm\":\"GameOverlay_saveScoreForm__GTFwf\",\"formDesc\":\"GameOverlay_formDesc__1NZAk\",\"formInput\":\"GameOverlay_formInput__GN6kZ\",\"error\":\"GameOverlay_error__CxX68\",\"lds_dual_ring\":\"GameOverlay_lds_dual_ring__Z7iuB\",\"lds-dual-ring\":\"GameOverlay_lds-dual-ring__1TG8e\",\"topScorer\":\"GameOverlay_topScorer__1nlm3\",\"leaderboardButton\":\"GameOverlay_leaderboardButton__2awEM\",\"leaderboardModal\":\"GameOverlay_leaderboardModal__osw0N\",\"closeButton\":\"GameOverlay_closeButton__2yy3U\",\"leadersList\":\"GameOverlay_leadersList__2XUML\",\"leadersItem\":\"GameOverlay_leadersItem__3UTzu\"};","import axios from 'axios';\r\nimport { createContext, useEffect, useState } from 'react';\r\nimport { getTopScores } from '../../api';\r\n\r\nconst GameContext = createContext();\r\n\r\nconst GAME_STATES = {\r\n  NOT_STARTED: 'NOT_STARTED',\r\n  START_TIMER: 'START_TIMER',\r\n  STARTED: 'STARTED',\r\n  FINISHED: 'FINISHED'\r\n};\r\n\r\nconst SCORE_CONSTATS = {\r\n  HIT: 10,\r\n  CLICK_NEGATIVE: 5\r\n};\r\n\r\nconst DEFAULT_CAMERA = {\r\n  FOV: 75,\r\n  SENSITIVITY: 0\r\n};\r\n\r\nlet timerInterval;\r\n\r\nconst GameContextProvider = ({ children }) => {\r\n  const [timeLeft, setTimeLeft] = useState(60);\r\n  const [gameStart, setGameStart] = useState(GAME_STATES.NOT_STARTED);\r\n  const [score, setScore] = useState(0);\r\n  const [totalClicks, setTotalClicks] = useState(0);\r\n  const [topScore, setTopScore] = useState(0);\r\n  const [fov, setFov] = useState(DEFAULT_CAMERA.FOV);\r\n  const [sensitivity, setSensitivity] = useState(DEFAULT_CAMERA.SENSITIVITY);\r\n  const [scoreSaved, setScoreSaved] = useState(false);\r\n  const [leaderboard, setLeaderboard] = useState();\r\n\r\n  const getScores = () => {\r\n    axios.get(getTopScores).then(res => {\r\n      if (res.data && res.data.users) {\r\n        setLeaderboard(res.data.users);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const topScoreLocal = localStorage.getItem('topScore');\r\n    const sensitivityLocal = localStorage.getItem('sensitivity');\r\n    const fovLocal = localStorage.getItem('fov');\r\n    const scoreSavedLocal = localStorage.getItem('scoreSaved');\r\n    if (topScoreLocal) {\r\n      setTopScore(JSON.parse(topScoreLocal));\r\n    }\r\n    if (fovLocal) {\r\n      setFov(JSON.parse(fovLocal));\r\n    }\r\n    if (sensitivityLocal) {\r\n      setSensitivity(JSON.parse(sensitivityLocal));\r\n    }\r\n    if (scoreSavedLocal) {\r\n      setScoreSaved(JSON.parse(scoreSavedLocal));\r\n    }\r\n    getScores();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('sensitivity', sensitivity);\r\n    localStorage.setItem('fov', fov);\r\n  }, [sensitivity, fov]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('scoreSaved', scoreSaved);\r\n  }, [scoreSaved]);\r\n\r\n  useEffect(() => {\r\n    //controls timer\r\n    if (gameStart === GAME_STATES.START_TIMER) {\r\n      timerInterval = setInterval(() => {\r\n        setTimeLeft(time => {\r\n          if (time > 1) {\r\n            return time - 1;\r\n          } else {\r\n            clearInterval(timerInterval);\r\n            setGameStart(GAME_STATES.FINISHED);\r\n            return 0;\r\n          }\r\n        });\r\n      }, 1000);\r\n      setGameStart(GAME_STATES.STARTED);\r\n    }\r\n    if (gameStart === GAME_STATES.FINISHED) {\r\n      clearInterval(timerInterval);\r\n    }\r\n  }, [gameStart]);\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        timeLeft,\r\n        setTimeLeft,\r\n        score,\r\n        setScore,\r\n        gameStart,\r\n        setGameStart,\r\n        totalClicks,\r\n        setTotalClicks,\r\n        topScore,\r\n        setTopScore,\r\n        fov,\r\n        setFov,\r\n        sensitivity,\r\n        setSensitivity,\r\n        scoreSaved,\r\n        setScoreSaved,\r\n        leaderboard,\r\n        getScores\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\nexport {\r\n  GameContext,\r\n  GameContextProvider,\r\n  GAME_STATES,\r\n  SCORE_CONSTATS,\r\n  DEFAULT_CAMERA\r\n};\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { remove, sample, sampleSize } from 'lodash';\r\n\r\nconst array = [...Array(21).keys()];\r\n\r\nconst SphereGrid = ({ setScore = () => {} }) => {\r\n  const [sphereList, setSphereList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const list = sampleSize(array, 3);\r\n    setSphereList(list);\r\n  }, []);\r\n\r\n  const Sphere = useCallback(\r\n    ({ position, id }) => {\r\n      return (\r\n        <mesh\r\n          onClick={e => {\r\n            const id = e.object.sphereId;\r\n            const list = [...sphereList].filter(item => item !== id);\r\n            const sampleList = remove(\r\n              [...array],\r\n              number => !sphereList.includes(number)\r\n            );\r\n\r\n            const newId = sample(sampleList);\r\n            setSphereList([...list, newId]);\r\n            setScore(score => score + 1);\r\n          }}\r\n          sphereId={id}\r\n          position={position}\r\n        >\r\n          <sphereGeometry args={[1, 32, 32]} />\r\n          <meshPhysicalMaterial color={'red'} />\r\n        </mesh>\r\n      );\r\n    },\r\n    [sphereList]\r\n  );\r\n\r\n  return (\r\n    <group position={[0, 0, -9]}>\r\n      {sphereList.includes(0) && <Sphere id={0} position={[9, 1, 0]} />}\r\n      {sphereList.includes(1) && <Sphere id={1} position={[6, 1, 0]} />}\r\n      {sphereList.includes(2) && <Sphere id={2} position={[3, 1, 0]} />}\r\n      {sphereList.includes(3) && <Sphere id={3} position={[0, 1, 0]} />}\r\n      {sphereList.includes(4) && <Sphere id={4} position={[-3, 1, 0]} />}\r\n      {sphereList.includes(5) && <Sphere id={5} position={[-6, 1, 0]} />}\r\n      {sphereList.includes(6) && <Sphere id={6} position={[-9, 1, 0]} />}\r\n\r\n      {sphereList.includes(7) && <Sphere id={7} position={[9, 4, 0]} />}\r\n      {sphereList.includes(8) && <Sphere id={8} position={[6, 4, 0]} />}\r\n      {sphereList.includes(9) && <Sphere id={9} position={[3, 4, 0]} />}\r\n      {sphereList.includes(10) && <Sphere id={10} position={[0, 4, 0]} />}\r\n      {sphereList.includes(11) && <Sphere id={11} position={[-3, 4, 0]} />}\r\n      {sphereList.includes(12) && <Sphere id={12} position={[-6, 4, 0]} />}\r\n      {sphereList.includes(13) && <Sphere id={13} position={[-9, 4, 0]} />}\r\n\r\n      {sphereList.includes(14) && <Sphere id={14} position={[9, 7, 0]} />}\r\n      {sphereList.includes(15) && <Sphere id={15} position={[6, 7, 0]} />}\r\n      {sphereList.includes(16) && <Sphere id={16} position={[3, 7, 0]} />}\r\n      {sphereList.includes(17) && <Sphere id={17} position={[0, 7, 0]} />}\r\n      {sphereList.includes(18) && <Sphere id={18} position={[-3, 7, 0]} />}\r\n      {sphereList.includes(19) && <Sphere id={19} position={[-6, 7, 0]} />}\r\n      {sphereList.includes(20) && <Sphere id={20} position={[-9, 7, 0]} />}\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default SphereGrid;\r\n","const API_CONSTANT = 'https://us-central1-gridshot-bbd16.cloudfunctions.net/';\r\nconst addScore = API_CONSTANT + 'addScore';\r\nconst getTopScores = API_CONSTANT + 'getTopScores';\r\n\r\nexport { addScore, getTopScores };\r\n","import { forwardRef } from 'react';\r\nimport { useFrame } from '@react-three/fiber';\r\nimport { PointerLockControls } from '@react-three/drei';\r\n\r\nlet pastCamera = [0, 0, 0];\r\n\r\nconst CameraControls = forwardRef((props, controlsRef) => {\r\n  const speed = 1 + props.sensitivity * 0.1;\r\n  useFrame(() => {\r\n    controlsRef.current.camera.fov = props.fov;\r\n    controlsRef.current.camera.updateProjectionMatrix();\r\n\r\n    if (\r\n      controlsRef.current.camera.rotation.x === 0 &&\r\n      controlsRef.current.camera.rotation.y === 0 &&\r\n      controlsRef.current.camera.rotation.z === 0\r\n    ) {\r\n      pastCamera = [0, 0, 0];\r\n    } else {\r\n      const diff = {\r\n        x: pastCamera[0] - controlsRef.current.camera.rotation.x,\r\n        y: pastCamera[1] - controlsRef.current.camera.rotation.y,\r\n        z: pastCamera[2] - controlsRef.current.camera.rotation.z\r\n      };\r\n      const newAngles = [\r\n        controlsRef.current.camera.rotation.x - diff.x * speed,\r\n        controlsRef.current.camera.rotation.y - diff.y * speed,\r\n        controlsRef.current.camera.rotation.z - diff.z * speed\r\n      ];\r\n\r\n      controlsRef.current.camera.rotation.set(\r\n        newAngles[0],\r\n        newAngles[1],\r\n        newAngles[2]\r\n      );\r\n\r\n      pastCamera[0] = controlsRef.current.camera.rotation.x;\r\n      pastCamera[1] = controlsRef.current.camera.rotation.y;\r\n      pastCamera[2] = controlsRef.current.camera.rotation.z;\r\n    }\r\n  });\r\n\r\n  return <PointerLockControls selector=\"#startButton\" ref={controlsRef} />;\r\n});\r\n\r\nexport default CameraControls;\r\n","import { Canvas, useFrame } from '@react-three/fiber';\r\nimport { DoubleSide, Vector3 } from 'three';\r\nimport { memo, useContext, useEffect, useRef } from 'react';\r\n// import Controls from \"../Controls\";\r\nimport SphereGrid from '../SphereGrid';\r\nimport { GameContext, GAME_STATES } from '../Context';\r\nimport './index.css';\r\nimport CameraControls from './PointerLockControls';\r\n\r\nconst ThreeCanvas = memo(() => {\r\n  const controls = useRef();\r\n  const { gameStart, setGameStart, setTimeLeft, setScore, setTotalClicks, sensitivity, fov } =\r\n    useContext(GameContext);\r\n\r\n  useEffect(() => {}, [controls]);\r\n  useEffect(() => {\r\n    if (gameStart === GAME_STATES.FINISHED) {\r\n      controls.current.unlock();\r\n    }\r\n  }, [gameStart]);\r\n\r\n  const startGame = () => {\r\n    setTimeLeft(60);\r\n    setGameStart(GAME_STATES.START_TIMER);\r\n    setScore(0);\r\n    setTotalClicks(0);\r\n  };\r\n\r\n  return (\r\n    <Canvas\r\n      onCreated={e => {\r\n        const cursor = document.querySelector('#cursor');\r\n        const startOverlay = document.querySelector('#startOverlay');\r\n        controls.current.addEventListener('lock', () => {\r\n          document.body.style.cursor = 'none';\r\n          cursor.style.display = 'initial';\r\n          startOverlay.style.display = 'none';\r\n          startGame();\r\n        });\r\n        controls.current.addEventListener('unlock', () => {\r\n          document.body.style.cursor = 'initial';\r\n          cursor.style.display = 'none';\r\n          startOverlay.style.display = 'block';\r\n          controls.current &&\r\n            controls.current.camera &&\r\n            controls.current.camera.rotation.set(0, 0, 0);\r\n          setGameStart(GAME_STATES.FINISHED);\r\n        });\r\n        controls.current.addEventListener('change', e => {\r\n          const x = new Vector3();\r\n          controls.current.getDirection(x);\r\n        });\r\n      }}\r\n    >\r\n      <pointLight\r\n        castShadow\r\n        color={`#fff`}\r\n        position={[0, 4, 10]}\r\n        intensity={2}\r\n      />\r\n      <ambientLight intensity={1} />\r\n      <SphereGrid setScore={setScore} />\r\n      <mesh scale={[20, 10, 18]} position={[0, 4, 0]}>\r\n        <boxGeometry />\r\n        <meshPhysicalMaterial\r\n          metalness={0.7}\r\n          roughness={2}\r\n          color=\"#fff\"\r\n          side={DoubleSide}\r\n        />\r\n      </mesh>\r\n      <CameraControls fov={fov} sensitivity={sensitivity} ref={controls} />\r\n    </Canvas>\r\n  );\r\n});\r\n\r\nexport default ThreeCanvas;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nconst Cursor = () => {\r\n  const cursorRef = useRef();\r\n\r\n  const updatePosition = (e) => {\r\n    if (cursorRef.current) {\r\n      cursorRef.current.style.left = `${e.clientX}px`;\r\n      cursorRef.current.style.top = `${e.clientY}px`;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.body.addEventListener(\"mousemove\", updatePosition);\r\n    return () => document.body.removeEventListener(\"mousemove\", updatePosition);\r\n  }, []);\r\n\r\n  return <span ref={cursorRef} id=\"cursor\" className=\"cursor\"></span>;\r\n};\r\n\r\nexport default Cursor;\r\n","import axios from 'axios';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { addScore } from '../../api';\r\nimport { GameContext, GAME_STATES, SCORE_CONSTATS } from '../Context';\r\nimport Filter from 'bad-words';\r\nimport styles from './index.module.css';\r\n\r\nconst usernameRegex = /^(?=[a-zA-Z0-9._]{3,20}$)(?!.*[_.]{2})[^_.].*[^_.]$/;\r\nconst filter = new Filter();\r\n\r\nconst GameOverlay = () => {\r\n  const {\r\n    timeLeft,\r\n    score,\r\n    totalClicks,\r\n    gameStart,\r\n    topScore,\r\n    setTopScore,\r\n    scoreSaved,\r\n    setScoreSaved,\r\n    leaderboard,\r\n    getScores\r\n  } = useContext(GameContext);\r\n\r\n  const [error, setError] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [spinner, setSpinner] = useState(false);\r\n  const [showLeaderboard, setShowLeaderboard] = useState(false);\r\n\r\n  const calculateScore = () => {\r\n    const positiveScore = score * SCORE_CONSTATS.HIT;\r\n    const negativeScore = (totalClicks - score) * SCORE_CONSTATS.CLICK_NEGATIVE;\r\n    return positiveScore - negativeScore;\r\n  };\r\n\r\n  const showFinishedOverlay =\r\n    gameStart === GAME_STATES.FINISHED || gameStart === GAME_STATES.NOT_STARTED;\r\n  const totalScore = calculateScore();\r\n  const misses = totalClicks - score;\r\n  const accuracy = ((score / totalClicks) * 100).toFixed(2);\r\n\r\n  const showSaveScore = gameStart === GAME_STATES.FINISHED && !scoreSaved && topScore;\r\n  const topScorer = leaderboard && leaderboard[0];\r\n  useEffect(() => {\r\n    if (gameStart === GAME_STATES.FINISHED) {\r\n      const total = calculateScore();\r\n      if (total > topScore) {\r\n        setTopScore(total);\r\n        setScoreSaved(false);\r\n        localStorage.setItem('topScore', total);\r\n      }\r\n    }\r\n  }, [gameStart]);\r\n\r\n  const submitForm = async () => {\r\n    if (!username || !usernameRegex.test(username)) {\r\n      setError(\r\n        'Please enter a valid username. Alpha-numeric between 3-20 characters'\r\n      );\r\n    } else {\r\n      try {\r\n        setSpinner(true);\r\n        const res = await axios.post(addScore, {\r\n          user: {\r\n            username: username,\r\n            score: Number(topScore)\r\n          }\r\n        });\r\n        setSpinner(false);\r\n        if (res.status === 200) {\r\n          setScoreSaved(true);\r\n          getScores();\r\n        }\r\n      } catch (e) {\r\n        setSpinner(false);\r\n        console.log(e);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div class={styles.gameOverlay}>\r\n      <div className={styles.counter}>\r\n        <div>\r\n          <span style={{ fontSize: '20px' }}>Time left:</span>\r\n          <span style={{ color: 'red' }} className={styles.count}>\r\n            {timeLeft}\r\n          </span>\r\n        </div>\r\n        <div>\r\n          <span>Current score:</span>\r\n          <span className={styles.count}>{totalScore}</span>\r\n        </div>\r\n      </div>\r\n      {topScorer && (\r\n        <div className={styles.topScorer}>\r\n          <div>Top Scorer</div>\r\n          <div>\r\n            {filter.clean(topScorer.username)} : {topScorer.score}\r\n          </div>\r\n          <div\r\n            className={styles.leaderboardButton}\r\n            onClick={() => setShowLeaderboard(true)}\r\n          >\r\n            See leaderboard\r\n          </div>\r\n        </div>\r\n      )}\r\n      {showFinishedOverlay && (\r\n        <div className={styles.finishedOverlay}>\r\n          <span>Score: {totalScore}</span>\r\n          <span>Hits: {score}</span>\r\n          <span>Total Clicks: {totalClicks}</span>\r\n          <span>Misses: {misses}</span>\r\n          <span>Accuracy: {isNaN(accuracy) ? 'N/A' : `${accuracy}%`}</span>\r\n          <span>Best Score: {topScore}</span>\r\n        </div>\r\n      )}\r\n      {showSaveScore && (\r\n        <div className={styles.saveScoreForm}>\r\n          <span className={styles.formDesc}>\r\n            Save your top score on the leaderboards.\r\n          </span>\r\n          <span className={styles.formInput}>\r\n            Enter name:{' '}\r\n            <input\r\n              type=\"text\"\r\n              value={username}\r\n              onChange={e => {\r\n                setUsername(e.target.value);\r\n              }}\r\n            />\r\n            {spinner && <div className={styles.lds_dual_ring}></div>}\r\n          </span>\r\n          <span\r\n            className={styles.error}\r\n            style={{ display: error ? 'inline' : 'none' }}\r\n          >\r\n            {error}\r\n          </span>\r\n          <button disabled={spinner} onClick={submitForm}>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      )}\r\n      {showLeaderboard && (\r\n        <div className={styles.leaderboardModal}>\r\n          <div\r\n            className={styles.closeButton}\r\n            onClick={() => setShowLeaderboard(false)}\r\n          >\r\n            close\r\n          </div>\r\n          <div className={styles.leadersList}>\r\n            <div className={styles.leadersItem}>\r\n              <span>Name</span>\r\n              <span>Score</span>\r\n            </div>\r\n            {leaderboard &&\r\n              leaderboard.map((item, index) => {\r\n                return (\r\n                  <div className={styles.leadersItem}>\r\n                    <span>{index + 1}. {filter.clean(item.username)}</span> \r\n                    <span>{item.score}</span>\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameOverlay;\r\n","import { useContext, useState } from 'react';\r\nimport { DEFAULT_CAMERA, GameContext, GAME_STATES } from '../Context';\r\nimport './index.css';\r\n\r\nconst StartOverlay = () => {\r\n  const { gameStart, setGameStart, sensitivity, setSensitivity, fov, setFov } =\r\n    useContext(GameContext);\r\n  const showReset = gameStart === GAME_STATES.FINISHED;\r\n\r\n  return (\r\n    <div id=\"startOverlay\">\r\n      <h3 className=\"text\">\r\n        Click the yellow circle in the center to start. Press ESC to exit.\r\n      </h3>\r\n      {<div id=\"startButton\" className={showReset ? 'disableStart' : ''} />}\r\n      {!showReset && <div className=\"clickTip\">Click the Yellow circle</div>}\r\n      {showReset && (\r\n        <button\r\n          className=\"retryButton\"\r\n          onClick={() => setGameStart(GAME_STATES.NOT_STARTED)}\r\n        >\r\n          Try Again?\r\n        </button>\r\n      )}\r\n      <div className=\"slidersWrapper\">\r\n        <div className=\"slider\">\r\n          <div>Sensitivity: {sensitivity}</div>\r\n          <input\r\n            type=\"range\"\r\n            min={-6}\r\n            max={6}\r\n            value={sensitivity}\r\n            onChange={e => setSensitivity(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"slider\">\r\n          <div>FOV: {fov}</div>\r\n          <input\r\n            type=\"range\"\r\n            min={40}\r\n            max={100}\r\n            value={fov}\r\n            onChange={e => setFov(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button\r\n            onClick={() => {\r\n              setSensitivity(DEFAULT_CAMERA.SENSITIVITY);\r\n              setFov(DEFAULT_CAMERA.FOV);\r\n            }}\r\n          >\r\n            Reset Defaults\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartOverlay;\r\n","import { useContext } from 'react';\r\nimport Canvas from '../Canvas';\r\nimport { GameContext, GAME_STATES } from '../Context';\r\nimport Cursor from '../Cursor';\r\nimport GameOverlay from '../GameOverlay';\r\nimport StartOverlay from '../StartOverlay';\r\n\r\nconst Game = () => {\r\n  const { gameStart, setTotalClicks } = useContext(GameContext);\r\n\r\n  const pressListener = e => {\r\n    if (gameStart === GAME_STATES.STARTED) {\r\n      setTotalClicks(clicks => clicks + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div onClick={pressListener} style={{ height: '100vh', width: '100vw' }}>\r\n      <Canvas />\r\n      <Cursor />\r\n      <StartOverlay />\r\n      <GameOverlay />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import Game from './modules/Game';\r\nimport { GameContextProvider } from './modules/Context';\r\n\r\nimport './index.css';\r\n\r\nexport default function App() {\r\n  return (\r\n    <GameContextProvider>\r\n      <Game />\r\n    </GameContextProvider>\r\n  );\r\n}\r\n","import { StrictMode } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}